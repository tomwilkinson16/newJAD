package GUI;

import Interfaces.BasketInterface;
import Items.Furniture;
import Items.Orders;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import Interfaces.NewItemInterface;
import Interfaces.SerializationInterface;
import Interfaces.SummaryInterface;
import Items.*;
import java.awt.event.MouseEvent;
import static java.awt.event.MouseEvent.*;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Basket Panel using Observer Patterns to display/load and save items,this class
 * displays all items that have been added to the basket through the new
 * item interface, using the Java library for mouse events, i can then talk to
 * each panel to edit the state of the basket.
 *
 * @author tomwi
 */
public class BasketPanel extends javax.swing.JPanel implements NewItemInterface,
        BasketInterface, SummaryInterface, MouseListener, SerializationInterface {

    Orders order = new Orders();

    List<JButton> buttons = new ArrayList<>();

    /**
     * 
     * Updates and adds buttons to the panel and adds MouseListeners to ensure
     * that the state can be changed, the initComponents calls all generated
     * code and builds the GUI.
     */
    public BasketPanel() {
        initComponents();

        buttons.add(basketButton1);
        basketButton1.addMouseListener(BasketPanel.this);
        buttons.add(basketButton2);
        basketButton2.addMouseListener(BasketPanel.this);
        buttons.add(basketButton3);
        basketButton3.addMouseListener(BasketPanel.this);
        buttons.add(basketButton4);
        basketButton4.addMouseListener(BasketPanel.this);
        buttons.add(basketButton5);
        basketButton5.addMouseListener(BasketPanel.this);
        buttons.add(basketButton6);
        basketButton6.addMouseListener(BasketPanel.this);
        buttons.add(basketButton7);
        basketButton7.addMouseListener(BasketPanel.this);
        buttons.add(basketButton8);
        basketButton8.addMouseListener(BasketPanel.this);
        buttons.add(basketButton9);
        basketButton9.addMouseListener(BasketPanel.this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basketButton1 = new javax.swing.JButton();
        basketButton2 = new javax.swing.JButton();
        basketButton3 = new javax.swing.JButton();
        basketButton4 = new javax.swing.JButton();
        basketButton5 = new javax.swing.JButton();
        basketButton6 = new javax.swing.JButton();
        basketButton7 = new javax.swing.JButton();
        basketButton8 = new javax.swing.JButton();
        basketButton9 = new javax.swing.JButton();

        setBackground(new java.awt.Color(57, 124, 213));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.GridLayout(3, 3, 5, 5));
        add(basketButton1);
        add(basketButton2);
        add(basketButton3);
        add(basketButton4);
        add(basketButton5);
        add(basketButton6);
        add(basketButton7);
        add(basketButton8);
        add(basketButton9);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton basketButton1;
    private javax.swing.JButton basketButton2;
    private javax.swing.JButton basketButton3;
    private javax.swing.JButton basketButton4;
    private javax.swing.JButton basketButton5;
    private javax.swing.JButton basketButton6;
    private javax.swing.JButton basketButton7;
    private javax.swing.JButton basketButton8;
    private javax.swing.JButton basketButton9;
    // End of variables declaration//GEN-END:variables

    private BasketInterface basketListener;
    private SummaryInterface summaryListener;

    /**addBasketListener is an import of the BasketInterface and this ensures
     * that the observer pattern works correctly.
     *
     * @param listener
     */
    public void addBasketListener(BasketInterface listener) {
        this.basketListener = listener;
    }

    /**addSummaryListener is an import of the SummaryInterface and this ensures
     * that the observer pattern works correctly.
     *
     * @param summaryListener
     */
    public void addSummaryListener(SummaryInterface summaryListener) {
        this.summaryListener = summaryListener;
    }

    /**addNewItemToBasket takes in the Furniture object and adds the new item
     * to the basket.
     * The If statement grabs the order index size and sets the image inside 
     * depending on if the basket has space. If it has space, it adds the item
     * to the basket and if it does not have space, it will display a message
     * stating that the basket is full inside a JOptionPane with a warning
     * message.
     * 
     * @param furn
     */
    @Override
    public void addNewItemToBasket(Furniture furn) {

        if (order.productsSize() < MAX_BASKET) {
            order.addProduct(furn);
            this.buttons.get(order.getItemIndex(furn)).setIcon(furn.getImage());
        } else {
            JOptionPane.showMessageDialog(this, "This basket is full", "WARNING",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    
    
    /**The removeAllItemsFromBasket method removes all the items from the basket
     * once the button has been pressed, it then sets all the image icons to null
     * to avoid the images being displayed once the basket is clear.
     *
     */
    @Override
    public void removeAllItemsFromBasket() {
        this.order.removeAllItems();
        for (JButton button : buttons) {
            button.setIcon(null);
        }
    }

    
    
    /**This method follows a similar process to the removing all items from the
     * basket but includes the basketListener method from the basketInterface.
     *
     */
    @Override
    public void removeSingleItem() {
        this.basketListener.removeSingleItem();
    }
    
    
    
    /**This method is used to edit singular items in the basket using singletons,
     * it creates a second instance of furniture and edits the state and saves
     * changes to the basket, the updateUI method makes sure that the method
     * updates correctly and the original panel state is returned after changes.
     *
     * @param furn
     */
    @Override
    public void editSingleItem(Furniture furn) {
        updateUI();
    }
    
    
    
    /**This method displays all current items in the basket, if the basket is 
     * empty nothing is displayed.
     *
     */
    @Override
    public void showBasketSummary() {
        System.out.println(order.summary());
    }

    /** This method is unused and is imported due to the implementation of the 
     * summary panel.
     *
     * @param summary
     */
    @Override
    public void summaryPanel(String summary) {
    }

    
    /**This is the load method and it uses the removeAllItemsFromBasket before
     * loading the basket, once the button is pressed the user has the option
     * to select a file in which they would like to load, once the file has been
     * loaded then the basket populates and the images are drawn to the GUI.
     *
     * @param file
     */
    @Override
    public void loadBasket(File file) {
        this.removeAllItemsFromBasket();
        try {
            
            if (file.getName().contains(".dat")){
                try (FileInputStream in = new FileInputStream(file);
                        ObjectInputStream obin = new ObjectInputStream(in)) {
                    order = (Orders) obin.readObject();
                    obin.close();
                    in.close();
                }
            }else{
                JOptionPane.showMessageDialog(null, "This file cannot be loaded,");
                
            }

        } catch (Exception e) {

        }

        for (int i = 0; i < order.productsSize(); i++) {
            if (order.productsSize() < MAX_BASKET) {
                this.buttons.get(i).setIcon(order.getItem(i).getImage());
            }
        }
        updateUI();

    }

    
    
    /**This is the save basket method and the file will only save if it is saved
     * as a ".dat" file, if the user tries to save without the exception, a 
     * warning message will display and the basket will not be saved.
     * 
     *
     * @param file
     */
    @Override
    public void saveBasket(File file) {

        if (order.productsSize() == 0) {
            JOptionPane.showMessageDialog(null, "The file cannot be saved,"
                    + " the basket is empty!");

        }else {
            if (file.getName().contains(".dat")) {
                try {

                    FileOutputStream out = new FileOutputStream(file);
                    ObjectOutputStream obout = new ObjectOutputStream(out);
                    obout.writeObject(order);
                    obout.close();
                    out.close();
                    JOptionPane.showMessageDialog(this, "Basket Saved", 
                            "Save", JOptionPane.PLAIN_MESSAGE);

                }catch (Exception e) {
                }
            }else {
                JOptionPane.showMessageDialog(null, "The file cannot be saved, "
                        + "please add the extension!");

            }
        }
    }

    
    
    /**This method returns the basket value back to the totalPricePanel so that
     * it can populate and display the price of the basket to the GUI.
     *
     * @return this.order.getTotalPrice()
     */
    public double totalPriceOfBasket() {
        return this.order.getTotalPrice();
    }

    
    /**This method handles the left,right and middle mouse button clicks in the
     * GUI.
     * All button clicks are sat inside switch statements with the constant
     * values of BUTTON1,BUTTON2,BUTTON3 which are imported through java
     * libraries. For BUTTON1, it displays the summary. For BUTTON2, it edits the
     * basket. And for BUTTON3 it removes the item from the basket.
     *
     * @param e
     */
    
    @Override
    public void mouseClicked(MouseEvent e) {

        switch (e.getButton()) {
            case BUTTON1:
                
                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        summaryListener.summaryPanel(order.getItem(i).
                                toString());
                    }
                }
            } catch (Exception evt) {

                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to display", "WARNING",
                        JOptionPane.WARNING_MESSAGE);
            }
            break;
            case BUTTON2:

                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        order.getItem(i);

                        if (order.getItem(i) instanceof Chair) {
                            MainFrame.getInstance().editChairPanel((Chair) (order.getItem(i)));
                            updateUI();
                        }
                        if (order.getItem(i) instanceof Desk) {
                            MainFrame.getInstance().editDeskPanel((Desk) (order.getItem(i)));
                            updateUI();
                        }
                        if (order.getItem(i) instanceof Table) {
                            MainFrame.getInstance().editTablePanel((Table) (order.getItem(i)));
                            updateUI();
                        }
                    }
                }
            } catch (Exception evt) {
                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to edit", "WARNING",
                        JOptionPane.WARNING_MESSAGE);

            }
            break;
            case BUTTON3:
                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        order.removeItem(i);
                        for (JButton button : buttons) {
                            button.setIcon(null);
                        }
                        for (int j = 0; j < order.productsSize(); j++) {
                            buttons.get(j).setIcon(order.getItem(j).
                                    getImage());
                        }
                    }
                }
            } catch (Exception evt) {
                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to delete", "WARNING",
                        JOptionPane.WARNING_MESSAGE);
            }
            break;
        }
    }

    /**This method is an unused override method which comes with mouseEvt
     * 
     */
    
    @Override
    public void mousePressed(MouseEvent e) {

    }

    /**This method is an unused override method which comes with mouseEvt
     * 
     */
    
    @Override
    public void mouseReleased(MouseEvent e) {

    }

    /**This method is an unused override method which comes with mouseEvt
     * 
     */
    
    
    @Override
    public void mouseEntered(MouseEvent e) {
    }

    
    /**This method is an unused override method which comes with mouseEvt
     * 
     */
    
    @Override
    public void mouseExited(MouseEvent e) {
    }

    
    




}
