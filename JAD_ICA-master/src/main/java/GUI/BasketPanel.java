package GUI;

import Interfaces.BasketInterface;
import Items.Furniture;
import Items.Orders;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import Interfaces.NewItemInterface;
import Interfaces.SerializationInterface;
import Interfaces.SummaryInterface;
import Items.Chair;
import Items.Desk;
import Items.Table;
import java.awt.event.MouseEvent;
import static java.awt.event.MouseEvent.BUTTON1;
import static java.awt.event.MouseEvent.BUTTON2;
import static java.awt.event.MouseEvent.BUTTON3;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Basket Panel using Observer Patterns to display/load and save items. This
 * class displays all items that have been added to the basket through the new
 * item interface. Using the Java library for mouse events, i can then talk to
 * each panel to edit the state of the basket.
 *
 * @author tomwi
 */
public class BasketPanel extends javax.swing.JPanel implements NewItemInterface,
        BasketInterface, SummaryInterface, MouseListener, SerializationInterface {

    Orders order = new Orders();

    List<JButton> buttons = new ArrayList<>();

    /**
     * Updates and adds buttons to the panel and adds MouseListeners to ensure
     * that the state can be changed
     */
    public BasketPanel() {
        initComponents();

        buttons.add(basketButton1);
        basketButton1.addMouseListener(BasketPanel.this);
        buttons.add(basketButton2);
        basketButton2.addMouseListener(BasketPanel.this);
        buttons.add(basketButton3);
        basketButton3.addMouseListener(BasketPanel.this);
        buttons.add(basketButton4);
        basketButton4.addMouseListener(BasketPanel.this);
        buttons.add(basketButton5);
        basketButton5.addMouseListener(BasketPanel.this);
        buttons.add(basketButton6);
        basketButton6.addMouseListener(BasketPanel.this);
        buttons.add(basketButton7);
        basketButton7.addMouseListener(BasketPanel.this);
        buttons.add(basketButton8);
        basketButton8.addMouseListener(BasketPanel.this);
        buttons.add(basketButton9);
        basketButton9.addMouseListener(BasketPanel.this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basketButton1 = new javax.swing.JButton();
        basketButton2 = new javax.swing.JButton();
        basketButton3 = new javax.swing.JButton();
        basketButton4 = new javax.swing.JButton();
        basketButton5 = new javax.swing.JButton();
        basketButton6 = new javax.swing.JButton();
        basketButton7 = new javax.swing.JButton();
        basketButton8 = new javax.swing.JButton();
        basketButton9 = new javax.swing.JButton();

        setBackground(new java.awt.Color(57, 124, 213));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.GridLayout(3, 3, 5, 5));
        add(basketButton1);
        add(basketButton2);
        add(basketButton3);
        add(basketButton4);
        add(basketButton5);
        add(basketButton6);
        add(basketButton7);
        add(basketButton8);
        add(basketButton9);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton basketButton1;
    private javax.swing.JButton basketButton2;
    private javax.swing.JButton basketButton3;
    private javax.swing.JButton basketButton4;
    private javax.swing.JButton basketButton5;
    private javax.swing.JButton basketButton6;
    private javax.swing.JButton basketButton7;
    private javax.swing.JButton basketButton8;
    private javax.swing.JButton basketButton9;
    // End of variables declaration//GEN-END:variables

    private BasketInterface basketListener;
    private SummaryInterface summaryListener;

    public void addBasketListener(BasketInterface listener) {
        this.basketListener = listener;
    }

    public void addSummaryListener(SummaryInterface summaryListener) {
        this.summaryListener = summaryListener;
    }

    @Override
    public void addNewItemToBasket(Furniture furn) {

        if (order.productsSize() < MAX_BASKET) {
            order.addProduct(furn);
            this.buttons.get(order.getItemIndex(furn)).setIcon(furn.getImage());
        } else {
            JOptionPane.showMessageDialog(this, "This basket is full", "WARNING",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    @Override
    public void removeAllItemsFromBasket() {
        this.order.removeAllItems();
        for (JButton button : buttons) {
            button.setIcon(null);
        }
    }

    @Override
    public void removeSingleItem() {
        this.basketListener.removeSingleItem();
    }

    @Override
    public void showBasketSummary() {
        System.out.println(order.summary());
    }

    @Override
    public void loadBasket(File file) {
        this.removeAllItemsFromBasket();
        try {
            try (FileInputStream in = new FileInputStream(file);
                    ObjectInputStream obin = new ObjectInputStream(in)) {
                order = (Orders) obin.readObject();
                obin.close();
                in.close();
            }

        } catch (Exception e) {

        }

        for (int i = 0; i < order.productsSize(); i++) {
            if (order.productsSize() < MAX_BASKET) {
                this.buttons.get(i).setIcon(order.getItem(i).getImage());
            }
        }
        updateUI();

    }

    @Override
    public void saveBasket(File file) {

        if (order.productsSize() == 0) {
            JOptionPane.showMessageDialog(null, "The file cannot be saved, the basket is empty!");

        } else {
            if (file.getName().contains(".dat")) {
                try {

                    FileOutputStream out = new FileOutputStream(file);
                    ObjectOutputStream obout = new ObjectOutputStream(out);
                    obout.writeObject(order);
                    obout.close();
                    out.close();
                    JOptionPane.showMessageDialog(this, "Basket Saved", "Save", JOptionPane.PLAIN_MESSAGE);

                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "The file cannot be saved, please add the extension!");

            }
        }
    }

    public double totalPriceOfBasket() {
        return this.order.getTotalPrice();
    }

    @Override
    public void mouseClicked(MouseEvent e) {

        switch (e.getButton()) {
            case BUTTON1:
                
                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        summaryListener.summaryPanel(order.getItem(i).
                                toString());
                    }
                }
            } catch (Exception evt) {

                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to display", "WARNING",
                        JOptionPane.WARNING_MESSAGE);
            }
            break;
            case BUTTON2:

                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        order.getItem(i);

                        if (order.getItem(i) instanceof Chair) {
                            MainFrame.getInstance().editChairPanel((Chair) (order.getItem(i)));
                            updateUI();
                        }
                        if (order.getItem(i) instanceof Desk) {
                            MainFrame.getInstance().editDeskPanel((Desk) (order.getItem(i)));
                            updateUI();
                        }
                        if (order.getItem(i) instanceof Table) {
                            MainFrame.getInstance().editTablePanel((Table) (order.getItem(i)));
                            updateUI();
                        }
                    }
                }
            } catch (Exception evt) {
                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to delete", "WARNING",
                        JOptionPane.WARNING_MESSAGE);

            }
            break;
            case BUTTON3:
                try {
                for (int i = 0; i < buttons.size(); i++) {
                    if (e.getSource() == buttons.get(i)) {
                        order.removeItem(i);
                        for (JButton button : buttons) {
                            button.setIcon(null);
                        }
                        for (int j = 0; j < order.productsSize(); j++) {
                            buttons.get(j).setIcon(order.getItem(j).
                                    getImage());
                        }
                    }
                }
            } catch (Exception evt) {
                JOptionPane.showMessageDialog(this, "This space is empty, "
                        + "nothing to delete", "WARNING",
                        JOptionPane.WARNING_MESSAGE);
            }
            break;
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void summaryPanel(String summary) {
    }

    @Override
    public void editSingleItem(Furniture furn) {
        updateUI();
    }

}
